#!/usr/bin/env python
# -*- coding: utf-8 -*-
#######################################################################
# nextShows - GUI launcher
# Copyright (C) 2006-2008 Gilles CHAUVIN <gcnweb@gmail.com>
# $Id$
#######################################################################
# Coding: UTF-8, 4 spaces indent, LF line terminator
#######################################################################
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2  of  the  License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be  useful, but
# WITHOUT  ANY  WARRANTY;  without  even  the   implied   warranty  of
# MERCHANTABILITY or FITNESS FOR A  PARTICULAR  PURPOSE. See  the  GNU
# General Public License for more details.
#
# You should have received a copy of the GNU  General  Public  License
# along with  this  program;  if  not,  write  to  the  Free  Software
# Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#######################################################################

from cgui.NextShowsConfig import NextShowsConfig
import libs.tools as tools
import os, sys

try:
    from PyQt4.Qt import *
except:
    os.system('kdialog --title "Error" --error "The nextShows configuration GUI requires PyQt4!\nPlease install a recent version and retry." &')
    sys.exit(1)


# Check PyQt version
if PYQT_VERSION < 0x040301:
    message = "Your PyQt version is too old (v%s)!\nYou need PyQt v4.3.0 or later." % PYQT_VERSION_STR
    os.system('kdialog --title "Error" --error "'+message+'" &')
    sys.exit(1)
# Check Qt version
if QT_VERSION < 0x040301:
    message = "Your Qt version is too old (v%s)!\nYou need Qt v4.3.0 or later." % QT_VERSION_STR
    os.system('kdialog --title "Error" --error "'+message+'" &')
    sys.exit(1)


class Splash(QSplashScreen):
    def __init__(self, parent=None):
        QSplashScreen.__init__(self, parent)

        # Picture
        self.pixLogo     = QPixmap(":/images/logos/images/logos/nextShows.png")
        self.pixDesktop  = QPixmap()
        self.captureArea = QRect()

        # Timeline
        self.timeLine    = QTimeLine(200)
        self.timeLine.setLoopCount(1)
        self.timeLine.setFrameRange(0, 100)
        self.timeLine.setCurveShape(QTimeLine.LinearCurve)
        QObject.connect(self.timeLine, SIGNAL("frameChanged(int)"), self._displayFrame)

        # Workaround to prevent displaying splash screen at the wrong position
        self.setPixmap(QPixmap(1,1))
        self.show()

        ## FIXME: Desktop area screenshot doesn't work properly with multiple-displays
        desktopAGeo = qApp.desktop().screen()
        self.captureArea = QRect( ( desktopAGeo.width()  - self.pixLogo.width()  ) / 2,
                                  ( desktopAGeo.height() - self.pixLogo.height() ) / 2,
                                    self.pixLogo.width(),
                                    self.pixLogo.height() )
        self.pixDesktop  = QPixmap().grabWindow( qApp.desktop().winId(),
                                                 self.captureArea.x(),
                                                 self.captureArea.y(),
                                                 self.captureArea.width(),
                                                 self.captureArea.height() )

    # Fade in
    def fadeIn(self):
        self.timeLine.setDirection(QTimeLine.Forward)
        self.timeLine.start()
        # Loop and return only when animation finishes
        while self.timeLine.state() == QTimeLine.Running:
            qApp.processEvents()

    # Fade out
    def fadeOut(self):
        self.timeLine.setDirection(QTimeLine.Backward)
        self.timeLine.start()
        # Loop and return only when animation finishes
        while self.timeLine.state() == QTimeLine.Running:
            qApp.processEvents()

    # Display splash image
    def _displayFrame(self, opacity):
        opacity   = 1.0 - ( float(100-opacity) / 100 )

        painter   = QPainter()
        pixSplash = QPixmap( self.captureArea.width(), self.captureArea.height() )

        painter.begin( pixSplash )
        painter.drawPixmap( 0, 0, self.pixDesktop )
        painter.setOpacity( opacity )
        painter.drawPixmap( 0, 0, self.pixLogo )

        ## DEBUG
        #painter.setPen( QPen( QColor( "#FF0000" ) ) )
        #painter.setOpacity( 1.0 )
        #painter.drawRect( 0, 0, self.captureArea.width()-1, self.captureArea.height()-1 )
        ## /DEBUG

        painter.end()

        self.setPixmap( pixSplash )
        self.show()


def main():
    app=QApplication(sys.argv)  # Init app
    splash = Splash()           # Splash

    splash.fadeIn()             # Splash "in"
    window=NextShowsConfig()    # Load main window
    splash.fadeOut()            # Splash "out"
    window.show()               # Show main window
    splash.finish(window)       # Close splash
    return app.exec_()          # Enter event loop


if __name__ == "__main__":
    RETVAL=main()
    print "Exit: %d" % RETVAL   # This is to make sure SK catches when GUI was closed
                                # using commandOutput()
    sys.exit(RETVAL)
